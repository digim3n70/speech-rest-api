#!/bin/bash
set -e # Exit immediately if any command fails
set -o pipefail # Ensure failures in a pipeline are detected

echo "--- Generating Secure and Validated Configuration for HerikaServer ---"

# --- Function to validate a discovered IP address ---
validate_ip() {
    local ip=$1
    local name=$2
    if [[ -z "$ip" ]]; then
        echo "ERROR: Discovery of $name IP address failed. Result was empty." >&2
        echo "This can happen if the network interface names have changed." >&2
        exit 1
    fi
    if ! [[ $ip =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
        echo "ERROR: Discovered $name IP address ('$ip') is not a valid format." >&2
        exit 1
    fi
    echo "Successfully discovered and validated $name IP: $ip"
}

# --- Discovery and Validation ---

# Discover WSL IP address
# Using 'hostname -I' is a simpler and often more reliable method.
WSL_IP=$(hostname -I | awk '{print $1}')
validate_ip "$WSL_IP" "WSL"

# Discover Windows Host IP address
# This is the most robust method: it finds the default route and extracts the gateway IP.
WINDOWS_IP=$(ip route | grep default | awk '{print $3}')
validate_ip "$WINDOWS_IP" "Windows Host"

# --- Configuration File Generation ---

# Define the path for the final .env file
ENV_FILE="./HerikaServer/conf/.env"

echo "Writing validated configuration to $ENV_FILE..."

# Write the discovered values and static ports to the .env file
# This overwrites the file each time, ensuring it's always fresh.
cat <<EOT > $ENV_FILE
# This file is auto-generated by the validated generate_config.sh script.
# Do not edit this file directly.

# --- Service Endpoints ---
KOBOLDCPP_URL="http://${WINDOWS_IP}:5001"
LOCALWHISPER_URL="http://${WSL_IP}:3000/transcribe"
KOKORO_HOST="${WSL_IP}"
KOKORO_PORT="8881"
CHROMADB_URL="http://${WSL_IP}:8000"
TEXT2VEC_URL="http://${WSL_IP}:7860"
EOT

echo "SUCCESS: Configuration securely written to $ENV_FILE"